@model BLL.Models.ProductInterfereViewModel

@{
    ViewBag.Title = "Edit Product";
}

<h2>Edit Product</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="col-md-8">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.TextAreaFor(m => m.Image, new { @style = "display: none;", @id = "hiddenArea" })
            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.PriceCMV, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.PriceCMV, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PriceCMV, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.StockCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.StockCount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StockCount, "", new { @class = "text-danger" })
                </div>
                <hr class="col-md-12"/>
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.SubcategoryId,
            htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.DropDownListFor(m => m.SubcategoryId, Model
                .Subcategories
                .Select(c => new SelectListItem
                {
                    Value = c.Id.ToString(),
                    Text = c.Name
                }),
                new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SubcategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.ManufacturerId,
            htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="height: 46px;">
                    @Html.DropDownListFor(m => m.ManufacturerId, Model
                .Manufacturers
                .Select(c => new SelectListItem
                {
                    Value = c.Id.ToString(),
                    Text = c.Name
                }),
                new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ManufacturerId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="col-md-12 preview" id="avatarPreview">@Html.Action("GetProductImage", "Product")</div>
            <div class="btn btn-default btn-file col-md-12" id="loadImageBtn">
                <form action="" method="post" id="uploadForm">
                    Load image
                    <i class="glyphicon glyphicon-folder-open"></i>
                    <input type="file" id="inputImage" name="file" accept=".jpg,.jpeg,.png,.gif,.bmp,.tiff" />
                </form>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
@Html.Partial("~/Views/Account/_CropperSelectImage.cshtml")

<div>
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://use.fontawesome.com/a4475ec063.js"></script>
    <script src="~/Scripts/cropper/bootstrap-filestyle.js"></script>
    <script src="~/Scripts/cropper/main.js"></script>
    <script src="~/Scripts/cropper/cropper.js"></script>
}

@section styles {
    <link href="~/Content/Site.css" rel="stylesheet" />
    <link href="~/Content/cropper/cropper.css" rel="stylesheet" />
    <link href="~/Content/cropper/main.css" rel="stylesheet" />
    <link href="~/Content/cropper/filestyle/forms.css" rel="stylesheet" />
    <link href="~/Content/cropper/filestyle/editor_custom.css" rel="stylesheet" />
}
